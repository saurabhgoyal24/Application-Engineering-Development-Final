/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AdminRole;

import Business.Enterprise.Enterprise;
import Business.Enterprise.MainAuthorityEnterprise;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Person.Doctor;
import Business.Person.Person;
import Business.Person.PersonDirectory;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Saurabh Goyal
 */
public class ManageEmployeeJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageEmployeeJPanel
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private PersonDirectory mainDoctorPersonDirectory;

    public ManageEmployeeJPanel(JPanel userProcessContainer, Enterprise enterprise, PersonDirectory mainDoctorPersonDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.mainDoctorPersonDirectory = mainDoctorPersonDirectory;
        populateEmployeeTable();
    }

    private void populateEmployeeTable() {

        DefaultTableModel dtm = (DefaultTableModel) tblEmployee.getModel();
        dtm.setRowCount(0);

        if (enterprise instanceof MainAuthorityEnterprise) {
            for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (!((o instanceof PatientOrganization) || (o instanceof DoctorOrganization))) {
                    for (Person person : o.getPersonDirectory().getPerosonList()) {

                        Object[] row = new Object[3];

                        row[0] = person.getFirstName() + " " + person.getLastName();
                        row[1] = person;
                        row[2] = o;

                        dtm.addRow(row);
                    }
                }
            }
        } else {

            for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (!(o instanceof PatientOrganization)) {
                    for (Person person : o.getPersonDirectory().getPerosonList()) {

                        Object[] row = new Object[3];

                        row[0] = person.getFirstName() + " " + person.getLastName();
                        row[1] = person;
                        row[2] = o;

                        dtm.addRow(row);
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmployee = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        btnAddEmployee = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnRemoveEmployee = new javax.swing.JButton();

        jLabel1.setText("Manage Employee");

        tblEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Employee Name", "Employee SSN", "Organization"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEmployee);
        if (tblEmployee.getColumnModel().getColumnCount() > 0) {
            tblEmployee.getColumnModel().getColumn(0).setResizable(false);
            tblEmployee.getColumnModel().getColumn(1).setResizable(false);
            tblEmployee.getColumnModel().getColumn(2).setResizable(false);
        }

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnAddEmployee.setText("Add Employee");
        btnAddEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEmployeeActionPerformed(evt);
            }
        });

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnRemoveEmployee.setText("Remove Employee");
        btnRemoveEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveEmployeeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(278, 278, 278)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRefresh)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(197, 197, 197))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRemoveEmployee)
                                .addGap(72, 72, 72)
                                .addComponent(btnAddEmployee))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addComponent(btnRefresh)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddEmployee)
                    .addComponent(btnRemoveEmployee))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAddEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEmployeeActionPerformed
        // TODO add your handling code here:
        AddEmployeeJPanel aejp = new AddEmployeeJPanel(userProcessContainer, enterprise, mainDoctorPersonDirectory);
        userProcessContainer.add("Add Employee", aejp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_btnAddEmployeeActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populateEmployeeTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnRemoveEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveEmployeeActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblEmployee.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select an employee first.");
            return;
        }

        int c = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete.", "Warning", JOptionPane.YES_NO_OPTION);
        if (c == JOptionPane.YES_OPTION) {

            Person p = (Person) tblEmployee.getValueAt(selectedRow, 1);
            Organization o = (Organization) tblEmployee.getValueAt(selectedRow, 2);
            
            if(p instanceof Doctor){
                Doctor d = (Doctor)p;
                d.getEnterpriseList().remove(enterprise);
            }

            o.getPersonDirectory().getPerosonList().remove(p);
            boolean flag = false;
            UserAccount rua = null;
            for (UserAccount ua : o.getUserAccountDirectory().getUserAccountList()) {
                if (ua.getPerson() == p) {
                    flag = true;
                    rua = ua;
                    break;
                }
            }

            if (flag == true) {
                o.getUserAccountDirectory().getUserAccountList().remove(rua);
            }

            populateEmployeeTable();

        }
    }//GEN-LAST:event_btnRemoveEmployeeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEmployee;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemoveEmployee;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblEmployee;
    // End of variables declaration//GEN-END:variables
}
