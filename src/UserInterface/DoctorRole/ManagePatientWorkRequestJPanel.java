/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorRole;

import Business.EcoSystem;
import Business.Encounter.Encounter;
import Business.Enterprise.ClinicEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Organization.NurseOrganization;
import Business.Organization.Organization;
import Business.Person.Doctor;
import Business.Person.Patient;
import Business.Person.Person;
import Business.WorkQueue.HospitalEnterpriseAdminWorkRequest;
import Business.WorkQueue.PatientWorkRequest;
import Business.WorkQueue.ReferDoctorWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Saurabh Goyal
 */
public class ManagePatientWorkRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePatientWorkRequestJPanel
     */
    private JPanel userProcessContainer;
    private Person person;
    private WorkRequest wr;
    private EcoSystem system;

    public ManagePatientWorkRequestJPanel(JPanel userProcessContainer, EcoSystem system, Person person) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.person = person;
        this.system = system;
        populateEnterpriseTable();
        lblAppointmentDetails.setVisible(false);
        txtAppointmentDetails.setVisible(false);
        btnSubmit.setVisible(false);
    }

    private void populateEnterpriseTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblEnterprise.getModel();
        dtm.setRowCount(0);

        Doctor d = (Doctor) person;
        for (Enterprise e : d.getEnterpriseList()) {

            Object[] row = new Object[2];
            row[0] = e;
            row[1] = e.getOrgId();

            dtm.addRow(row);

        }
    }

    private ArrayList<Encounter> getEncounterOfPatient(Enterprise e, Patient p, Doctor d) {

        ArrayList<Encounter> encounterHistory = new ArrayList<>();

        if (e instanceof HospitalEnterprise) {

            HospitalEnterprise he = (HospitalEnterprise) e;

            for (Encounter encounter : he.getEncounterList()) {

                if (encounter.getPatient() == p && encounter.getDoctor() == d) {
                    encounterHistory.add(encounter);
                }
            }
        }
        if (e instanceof ClinicEnterprise) {

            ClinicEnterprise ce = (ClinicEnterprise) e;

            for (Encounter encounter : ce.getEncounterList()) {

                if (encounter.getPatient() == p && encounter.getDoctor() == d) {

                    encounterHistory.add(encounter);

                }
            }
        }
        return encounterHistory;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblManagePatientWorkRequest = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEnterprise = new javax.swing.JTable();
        lblHospitalAndClinicEnterprise = new javax.swing.JLabel();
        btnViewRequests = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblWorkRequest = new javax.swing.JTable();
        btnAddEncounter = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnProcessRequest = new javax.swing.JButton();
        btnViewRequest = new javax.swing.JButton();
        txtAppointmentDetails = new javax.swing.JTextField();
        lblAppointmentDetails = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        btnReferAnotherDoctor = new javax.swing.JButton();
        btnViewEncounterHistory = new javax.swing.JButton();
        btnNurseRequest = new javax.swing.JButton();

        lblManagePatientWorkRequest.setText("Manage Patient Work Request");

        tblEnterprise.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Enterprise Name", "Enterprise ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEnterprise);
        if (tblEnterprise.getColumnModel().getColumnCount() > 0) {
            tblEnterprise.getColumnModel().getColumn(0).setResizable(false);
            tblEnterprise.getColumnModel().getColumn(1).setResizable(false);
        }

        lblHospitalAndClinicEnterprise.setText("Hospital and Clinic Enterprise");

        btnViewRequests.setText("View  Requests");
        btnViewRequests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewRequestsActionPerformed(evt);
            }
        });

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblWorkRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "WorkRequestID", "Message", "Patient Name", "MRN", "Contact Number", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblWorkRequest);
        if (tblWorkRequest.getColumnModel().getColumnCount() > 0) {
            tblWorkRequest.getColumnModel().getColumn(0).setResizable(false);
            tblWorkRequest.getColumnModel().getColumn(1).setResizable(false);
            tblWorkRequest.getColumnModel().getColumn(2).setResizable(false);
            tblWorkRequest.getColumnModel().getColumn(3).setResizable(false);
            tblWorkRequest.getColumnModel().getColumn(4).setResizable(false);
            tblWorkRequest.getColumnModel().getColumn(5).setResizable(false);
        }

        btnAddEncounter.setText("Add Encounter");
        btnAddEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEncounterActionPerformed(evt);
            }
        });

        btnProcessRequest.setText("Process Request");
        btnProcessRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessRequestActionPerformed(evt);
            }
        });

        btnViewRequest.setText("View Request");
        btnViewRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewRequestActionPerformed(evt);
            }
        });

        txtAppointmentDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAppointmentDetailsActionPerformed(evt);
            }
        });

        lblAppointmentDetails.setText("Appointment Details");

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnReferAnotherDoctor.setText("Refer Another Doctor");
        btnReferAnotherDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReferAnotherDoctorActionPerformed(evt);
            }
        });

        btnViewEncounterHistory.setText("View Encounter History");
        btnViewEncounterHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewEncounterHistoryActionPerformed(evt);
            }
        });

        btnNurseRequest.setText("Nurse Request>>");
        btnNurseRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNurseRequestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(295, 295, 295)
                        .addComponent(lblManagePatientWorkRequest))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(lblHospitalAndClinicEnterprise))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(281, 281, 281)
                        .addComponent(btnViewRequests))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(lblAppointmentDetails)
                        .addGap(78, 78, 78)
                        .addComponent(txtAppointmentDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(btnSubmit))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(btnBack)
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnProcessRequest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnNurseRequest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAddEncounter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnViewEncounterHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnReferAnotherDoctor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnViewRequest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(88, 88, 88))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblManagePatientWorkRequest)
                .addGap(30, 30, 30)
                .addComponent(lblHospitalAndClinicEnterprise)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnViewRequests)
                .addGap(21, 21, 21)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddEncounter)
                    .addComponent(btnProcessRequest)
                    .addComponent(btnViewRequest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReferAnotherDoctor)
                    .addComponent(btnViewEncounterHistory)
                    .addComponent(btnNurseRequest))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAppointmentDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAppointmentDetails)
                    .addComponent(btnSubmit))
                .addGap(33, 33, 33)
                .addComponent(btnBack)
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewRequestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewRequestsActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblEnterprise.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select an enterprise first.");
            return;
        }

        Enterprise enterprise = (Enterprise) tblEnterprise.getValueAt(selectedRow, 0);

        DefaultTableModel dtm = (DefaultTableModel) tblWorkRequest.getModel();
        dtm.setRowCount(0);

        for (WorkRequest wr : person.getWorkQueue().getWorkRequestList()) {

            if (wr instanceof HospitalEnterpriseAdminWorkRequest) {

                HospitalEnterpriseAdminWorkRequest heawr = (HospitalEnterpriseAdminWorkRequest) wr;

                if (heawr.getSenderEnterprise() == enterprise) {
                    Object[] row = new Object[6];

                    row[0] = heawr.getRequestId();
                    row[1] = wr;
                    Patient p = (Patient) heawr.getPatient();
                    row[2] = p.getFirstName() + " " + p.getLastName();
                    row[3] = p.getMedicalRecordNumber();
                    row[4] = p.getPhoneNumber();
                    row[5] = heawr.getStatus();
                    dtm.addRow(row);

                }
            }

            if (wr instanceof PatientWorkRequest) {

                PatientWorkRequest pwr = (PatientWorkRequest) wr;

                if (pwr.getPatient().getPreferredDoctor() == (Doctor) person) {

                    if (pwr.getReceiverEnterprise() == enterprise) {
                        Object[] row = new Object[6];

                        row[0] = pwr.getRequestId();
                        row[1] = wr;
                        Patient p = (Patient) pwr.getPatient();
                        row[2] = p.getFirstName() + " " + p.getLastName();
                        row[3] = p.getMedicalRecordNumber();
                        row[4] = p.getPhoneNumber();
                        row[5] = pwr.getStatus();

                        dtm.addRow(row);

                    }
                } else {
                    if (pwr.getPatient().getTemproryDoctor() != null) {

                        if (pwr.getReceiverEnterprise() == enterprise) {
                            Object[] row = new Object[6];

                            row[0] = pwr.getRequestId();
                            row[1] = wr;
                            Patient p = (Patient) pwr.getPatient();
                            row[2] = p.getFirstName() + " " + p.getLastName();
                            row[3] = p.getMedicalRecordNumber();
                            row[4] = p.getPhoneNumber();
                            row[5] = pwr.getStatus();

                            dtm.addRow(row);

                        }
                    }
                }
            }
            if (wr instanceof ReferDoctorWorkRequest) {

                ReferDoctorWorkRequest rdwr = (ReferDoctorWorkRequest) wr;

                if (rdwr.getReceiverEnterprise() == enterprise) {

                    if (rdwr.getPatient().getTemproryDoctor() != null) {

                        if ((Doctor) person == rdwr.getPatient().getTemproryDoctor()) {

                            Object[] row = new Object[6];

                            row[0] = rdwr.getRequestId();
                            row[1] = rdwr;
                            Patient p = (Patient) rdwr.getPatient();
                            row[2] = p.getFirstName() + " " + p.getLastName();
                            row[3] = p.getMedicalRecordNumber();
                            row[4] = p.getPhoneNumber();
                            row[5] = rdwr.getStatus();

                            dtm.addRow(row);

                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnViewRequestsActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewRequestActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkRequest.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a Work Request first.");
            return;
        }
        WorkRequest wr = (WorkRequest) tblWorkRequest.getValueAt(selectedRow, 1);

        ViewRequestJPanel vrjp = new ViewRequestJPanel(userProcessContainer, wr);
        userProcessContainer.add("View Request", vrjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_btnViewRequestActionPerformed

    private void btnProcessRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessRequestActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkRequest.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a Work request first.");
            return;
        }
        wr = (WorkRequest) tblWorkRequest.getValueAt(selectedRow, 1);

        if (wr instanceof HospitalEnterpriseAdminWorkRequest) {
            JOptionPane.showMessageDialog(null, "This work request cannot be processed.");
            return;
        }

        if (wr instanceof ReferDoctorWorkRequest) {
            JOptionPane.showMessageDialog(null, "This work request cannot be processed.");
            return;
        }

        if (wr.getStatus().equals("Processed")) {
            JOptionPane.showMessageDialog(null, "This rewues has already been processed.");
            return;
        }

        lblAppointmentDetails.setVisible(true);
        txtAppointmentDetails.setVisible(true);
        btnSubmit.setVisible(true);

    }//GEN-LAST:event_btnProcessRequestActionPerformed

    private void txtAppointmentDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAppointmentDetailsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAppointmentDetailsActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        String appointmentDetails = txtAppointmentDetails.getText();

        wr.setStatus("Processed");
        PatientWorkRequest pwr = (PatientWorkRequest) wr;
        pwr.setAppointmentDetails(appointmentDetails);

        lblAppointmentDetails.setVisible(false);
        txtAppointmentDetails.setVisible(false);
        btnSubmit.setVisible(false);
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnAddEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEncounterActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkRequest.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a work request to process. ");
            return;
        }
        WorkRequest wr = (WorkRequest) tblWorkRequest.getValueAt(selectedRow, 1);

        AddEncounterJPanel aejp = new AddEncounterJPanel(userProcessContainer, system, wr);
        userProcessContainer.add("Add Encounter", aejp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnAddEncounterActionPerformed

    private void btnReferAnotherDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReferAnotherDoctorActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkRequest.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a work request first.");
            return;
        }

        WorkRequest wr = (WorkRequest) tblWorkRequest.getValueAt(selectedRow, 1);

        if (wr instanceof HospitalEnterpriseAdminWorkRequest) {

            HospitalEnterpriseAdminWorkRequest heawr = (HospitalEnterpriseAdminWorkRequest) wr;

            Patient patient = (Patient) heawr.getPatient();
            Enterprise enterprise = heawr.getSenderEnterprise();
            Doctor doctor = (Doctor) person;

            ArrayList<Encounter> encounterHistory = getEncounterOfPatient(enterprise, patient, doctor);

            if (patient.getTemproryDoctor() != null) {
                JOptionPane.showMessageDialog(null, "This patient is already refered to another doctor.");
                return;
            }
            ReferAnotherDoctorJPanel radjp = new ReferAnotherDoctorJPanel(userProcessContainer, system, encounterHistory, enterprise, patient, doctor);
            userProcessContainer.add("Refer Another Doctor", radjp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);

        }

        if (wr instanceof PatientWorkRequest) {

            PatientWorkRequest pwr = (PatientWorkRequest) wr;

            Patient patient = pwr.getPatient();

            if (patient.getPreferredDoctor() != (Doctor) person) {
                JOptionPane.showMessageDialog(null, "This request cannot be refered to another doctor.");
                return;
            }

            Doctor doctor = (Doctor) person;
            Enterprise enterprise = pwr.getReceiverEnterprise();
            ArrayList<Encounter> encounterHistory = getEncounterOfPatient(enterprise, patient, doctor);

            if (patient.getTemproryDoctor() != null) {
                JOptionPane.showMessageDialog(null, "This patient is already refered to another doctor.");
                return;
            }
            ReferAnotherDoctorJPanel radjp = new ReferAnotherDoctorJPanel(userProcessContainer, system, encounterHistory, enterprise, patient, doctor);
            userProcessContainer.add("Refer Another Doctor", radjp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);

        }

        if (wr instanceof ReferDoctorWorkRequest) {
            JOptionPane.showMessageDialog(null, "This request cannot be referred to another doctor.");
            return;
        }


    }//GEN-LAST:event_btnReferAnotherDoctorActionPerformed

    private void btnViewEncounterHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewEncounterHistoryActionPerformed
//         TODO add your handling code here:
        int selectedRow = tblWorkRequest.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a work request first.");
            return;
        }

        WorkRequest wr = (WorkRequest) tblWorkRequest.getValueAt(selectedRow, 1);

        if (wr instanceof HospitalEnterpriseAdminWorkRequest) {

            HospitalEnterpriseAdminWorkRequest heawr = (HospitalEnterpriseAdminWorkRequest) wr;

            Patient patient = (Patient) heawr.getPatient();
            Enterprise enterprise = heawr.getSenderEnterprise();
            Doctor doctor = (Doctor) person;

            ArrayList<Encounter> encounterHistory = getEncounterOfPatient(enterprise, patient, doctor);

            ViewEncounterHistoryJPanel vehjp = new ViewEncounterHistoryJPanel(userProcessContainer, encounterHistory, patient);
            userProcessContainer.add("View Encounter History", vehjp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }

        if (wr instanceof ReferDoctorWorkRequest) {
            ReferDoctorWorkRequest rdwr = (ReferDoctorWorkRequest) wr;

            Patient patient = rdwr.getPatient();
            Doctor doctor = (Doctor) person;
            Enterprise e = rdwr.getReceiverEnterprise();

            ArrayList<Encounter> encounterOldList = rdwr.getEncounterHistory();
            ArrayList<Encounter> encounterNewList = getEncounterOfPatient(e, patient, doctor);

            ArrayList<Encounter> encounterList = new ArrayList<>();
            for (Encounter encounter : encounterOldList) {
                encounterList.add(encounter);
            }
            for (Encounter encounter : encounterNewList) {
                encounterList.add(encounter);
            }

            ViewEncounterHistoryJPanel vehjp = new ViewEncounterHistoryJPanel(userProcessContainer, encounterList, patient);

            userProcessContainer.add("View Encounter History", vehjp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);

        }

        if (wr instanceof PatientWorkRequest) {

            PatientWorkRequest pwr = (PatientWorkRequest) wr;

            Patient patient = pwr.getPatient();
            Doctor doctor = (Doctor) person;

            Enterprise enterprise = pwr.getReceiverEnterprise();
            ArrayList<Encounter> encounterHistory = getEncounterOfPatient(enterprise, patient, doctor);

            ViewEncounterHistoryJPanel vehjp = new ViewEncounterHistoryJPanel(userProcessContainer, encounterHistory, patient);
            userProcessContainer.add("View Encounter History", vehjp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }


    }//GEN-LAST:event_btnViewEncounterHistoryActionPerformed

    private void btnNurseRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNurseRequestActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkRequest.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a work request first.");
            return;
        }
        WorkRequest wr = (WorkRequest)tblWorkRequest.getValueAt(selectedRow, 1);
        Enterprise enterprise1 = null;
        Doctor doctor = null;
        Patient patient = null;

        if (wr instanceof HospitalEnterpriseAdminWorkRequest) {

            HospitalEnterpriseAdminWorkRequest heawr = (HospitalEnterpriseAdminWorkRequest) wr;

            patient = (Patient) heawr.getPatient();
            enterprise1 = heawr.getSenderEnterprise();
            doctor = (Doctor) person;
        }

        if (wr instanceof ReferDoctorWorkRequest) {
            ReferDoctorWorkRequest rdwr = (ReferDoctorWorkRequest) wr;

            patient = rdwr.getPatient();
            doctor = (Doctor) person;
            enterprise1 = rdwr.getReceiverEnterprise();
        }

        if (wr instanceof PatientWorkRequest) {

            PatientWorkRequest pwr = (PatientWorkRequest) wr;

            patient = pwr.getPatient();
            doctor = (Doctor) person;

            enterprise1 = pwr.getReceiverEnterprise();
        }
        boolean flag = false;
        for (Organization o : enterprise1.getOrganizationDirectory().getOrganizationList()) {
            if (o instanceof NurseOrganization) {
                flag = true;
            }
        }

        if (flag == true) {
            NurseRequestJPanel nrjp = new NurseRequestJPanel(userProcessContainer, enterprise1, doctor, patient);
            userProcessContainer.add("Nurse Request", nrjp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }else{
            JOptionPane.showMessageDialog(null, "Nurse Organization is not there in this Enterprise.");
            return;
        }
    }//GEN-LAST:event_btnNurseRequestActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEncounter;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnNurseRequest;
    private javax.swing.JButton btnProcessRequest;
    private javax.swing.JButton btnReferAnotherDoctor;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnViewEncounterHistory;
    private javax.swing.JButton btnViewRequest;
    private javax.swing.JButton btnViewRequests;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAppointmentDetails;
    private javax.swing.JLabel lblHospitalAndClinicEnterprise;
    private javax.swing.JLabel lblManagePatientWorkRequest;
    private javax.swing.JTable tblEnterprise;
    private javax.swing.JTable tblWorkRequest;
    private javax.swing.JTextField txtAppointmentDetails;
    // End of variables declaration//GEN-END:variables
}
