/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorRole;

import Business.EcoSystem;
import Business.Encounter.Encounter;
import Business.Enterprise.ClinicEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Network.CityNetwork;
import Business.Network.CountryNetwork;
import Business.Network.StateNetwork;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Person.Doctor;
import Business.Person.Patient;
import Business.Person.Person;
import Business.WorkQueue.ReferDoctorWorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Saurabh Goyal
 */
public class ReferAnotherDoctorJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ReferAnotherDoctorJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem system;
    private ArrayList<Encounter> encounterHistory;
    private Patient patient;
    private Doctor senderDoctor;
    private Enterprise senderEnterprise;
    private Enterprise receiverEnterprise;

    public ReferAnotherDoctorJPanel(JPanel userProcessContainer, EcoSystem system, ArrayList<Encounter> encounterHistory, Enterprise enterprise, Patient patient, Doctor doctor) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.encounterHistory = encounterHistory;
        this.patient = patient;
        this.senderDoctor = doctor;
        this.senderEnterprise = enterprise;
        populateCountryComboBox();
    }

    private void populateCountryComboBox() {
        cmbCountry.removeAllItems();

        for (CountryNetwork cn : system.getCountryNetworkList()) {
            cmbCountry.addItem(cn);
        }
    }

    private void populateStateComboBox(CountryNetwork cn) {
        cmbState.removeAllItems();

        for (StateNetwork sn : cn.getStateNetwork()) {
            cmbState.addItem(sn);
        }
    }

    private void populateCityComboBox(StateNetwork sn) {
        cmbCity.removeAllItems();

        for (CityNetwork cin : sn.getCityNetwork()) {
            cmbCity.addItem(cin);
        }
    }

    private void populateEnterpriseComboBox(CityNetwork cin) {

        cmbEnterprise.removeAllItems();

        for (Enterprise e : cin.getEnterpriseDirectory().getEnterpriseList()) {

            if ((e instanceof HospitalEnterprise) || (e instanceof ClinicEnterprise)) {
                cmbEnterprise.addItem(e);
            }
        }
    }

    private void populateDotcorTable(Enterprise e) {
        DefaultTableModel dtm = (DefaultTableModel) tblDoctor.getModel();
        dtm.setRowCount(0);

        for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
            if (o instanceof DoctorOrganization) {
                for (Person p : o.getPersonDirectory().getPerosonList()) {
                    Doctor d = (Doctor) p;
                    if (d != senderDoctor) {

                        Object[] row = new Object[3];

                        row[0] = d.getFirstName() + " " + d.getLastName();
                        row[1] = d;
                        row[2] = d.getSpecialization();

                        dtm.addRow(row);
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblReferAnotherDoctor = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblCountry = new javax.swing.JLabel();
        cmbCountry = new javax.swing.JComboBox();
        lblState = new javax.swing.JLabel();
        cmbState = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        cmbCity = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cmbEnterprise = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        lblId = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblType = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoctor = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        txtMessage = new javax.swing.JTextField();
        btnSendRequest = new javax.swing.JButton();

        lblReferAnotherDoctor.setText("Refer Another Doctor");

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblCountry.setText("Country");

        cmbCountry.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCountryActionPerformed(evt);
            }
        });

        lblState.setText("State");

        cmbState.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStateActionPerformed(evt);
            }
        });

        jLabel1.setText("City");

        cmbCity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCityActionPerformed(evt);
            }
        });

        jLabel2.setText("Enterprise");

        cmbEnterprise.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbEnterprise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEnterpriseActionPerformed(evt);
            }
        });

        jLabel3.setText("Enterprise ID");

        jLabel4.setText("Enterprise Type");

        tblDoctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor Name", "Doctor SSN", "Specialization"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDoctor);
        if (tblDoctor.getColumnModel().getColumnCount() > 0) {
            tblDoctor.getColumnModel().getColumn(0).setResizable(false);
            tblDoctor.getColumnModel().getColumn(1).setResizable(false);
            tblDoctor.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel5.setText("Message");

        btnSendRequest.setText("Send Request");
        btnSendRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendRequestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(258, 258, 258)
                        .addComponent(lblReferAnotherDoctor))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCountry)
                            .addComponent(jLabel1))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbCountry, 0, 93, Short.MAX_VALUE)
                            .addComponent(cmbCity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblState)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbState, 0, 96, Short.MAX_VALUE)
                            .addComponent(cmbEnterprise, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblId)
                            .addComponent(lblType)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jLabel5)
                        .addGap(54, 54, 54)
                        .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(btnSendRequest)))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblReferAnotherDoctor)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCountry)
                    .addComponent(cmbCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblState)
                    .addComponent(cmbState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cmbEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblType))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSendRequest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void cmbCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCountryActionPerformed
        // TODO add your handling code here:
        CountryNetwork cn = (CountryNetwork) cmbCountry.getSelectedItem();

        if (cn != null) {
            populateStateComboBox(cn);
        }
    }//GEN-LAST:event_cmbCountryActionPerformed

    private void cmbStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStateActionPerformed
        // TODO add your handling code here:
        StateNetwork sn = (StateNetwork) cmbState.getSelectedItem();

        if (sn != null) {
            populateCityComboBox(sn);
        }
    }//GEN-LAST:event_cmbStateActionPerformed

    private void cmbCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCityActionPerformed
        // TODO add your handling code here:
        CityNetwork cin = (CityNetwork) cmbCity.getSelectedItem();

        if (cin != null) {
            populateEnterpriseComboBox(cin);
        }
    }//GEN-LAST:event_cmbCityActionPerformed

    private void cmbEnterpriseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEnterpriseActionPerformed
        // TODO add your handling code here:
        receiverEnterprise = (Enterprise) cmbEnterprise.getSelectedItem();

        if (receiverEnterprise != null) {
            lblId.setText(String.valueOf(receiverEnterprise.getOrgId()));
            if (receiverEnterprise instanceof HospitalEnterprise) {
                lblType.setText("Hospital Enterprise");
            }
            if (receiverEnterprise instanceof ClinicEnterprise) {
                lblType.setText("Clinic Enterprise");
            }
            populateDotcorTable(receiverEnterprise);
        }


    }//GEN-LAST:event_cmbEnterpriseActionPerformed

    private void btnSendRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendRequestActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDoctor.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a doctor first.");
            return;
        }

        String message = txtMessage.getText();
        Doctor receiverDoctor = (Doctor) tblDoctor.getValueAt(selectedRow, 1);

        if (message.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a message first.");
            return;
        }

        ReferDoctorWorkRequest rdwr = new ReferDoctorWorkRequest();

        rdwr.setMessage(message);
        rdwr.setPatient(patient);
        rdwr.setSender(senderDoctor);
        rdwr.setReceiver(receiverDoctor);
        rdwr.setSenderEnterprise(senderEnterprise);
        rdwr.setReceiverEnterprise(receiverEnterprise);
        rdwr.setStatus("Sent to " + receiverDoctor.getFirstName() + " " + receiverDoctor.getLastName() + " from " + senderDoctor.getFirstName() + " " + senderDoctor.getLastName());
        rdwr.setEncounterHistory(encounterHistory);
        
        senderDoctor.getWorkQueue().getWorkRequestList().add(rdwr);
        receiverDoctor.getWorkQueue().getWorkRequestList().add(rdwr);
        patient.getWorkQueue().getWorkRequestList().add(rdwr);
        patient.setTemproryDoctor(receiverDoctor);
        patient.setTemproryDoctorEnterprise(receiverEnterprise);
        btnSendRequest.setEnabled(false);

    }//GEN-LAST:event_btnSendRequestActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSendRequest;
    private javax.swing.JComboBox cmbCity;
    private javax.swing.JComboBox cmbCountry;
    private javax.swing.JComboBox cmbEnterprise;
    private javax.swing.JComboBox cmbState;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCountry;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblReferAnotherDoctor;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblType;
    private javax.swing.JTable tblDoctor;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables
}
